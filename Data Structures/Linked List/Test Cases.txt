1. create Node -> check if node added
2. insert new node in front to an empty list -> new node should be created and become front of list
3. insert new node in front -> check if node added in front is new node
4. insert new node in middle to an empty list -> new node should be created and become front of list
5. insert new node in middle after given node -> check if node added after given node is new node
6. If given node is nullptr -> insert node at front
7. insert new node in middle after last node in list -> new node should be created and become last of list
8. If new node is nullptr -> throw exception
9. Create a list with nodes and support these operations-> list should support adding at front,end,middle
10. delete  node in front -> check if node deleted in front is  not node
11. delete  node in empty list ->  return nullptr, error msg
12. delete  node in end -> check if node in end is  not node
13. delete  node if only 1 node in list ->  node should be deleted list becomes empty
14. If given node is nullptr -> delete node at front
15. search for given value -> return address of node with given value
16. search for given value which occur after n times -> return address of given value
17. update value of a given node->error string if not exist, update value if exist, return node 